
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: openobserve
#   annotations:
#     storageclass.kubernetes.io/is-default-class: "true"
# provisioner: ebs.csi.eks.amazonaws.com
# volumeBindingMode: WaitForFirstConsumer
# allowVolumeExpansion: true
# parameters:
#   type: gp3
#   fsType: ext4
#   encrypted: "true"
# reclaimPolicy: Retain
# # ---
# # apiVersion: v1
# # kind: PersistentVolumeClaim
# # metadata:
# #   name: openobserve-pvc
# #   namespace: openobserve
# # spec:
# #   accessModes:
# #     - ReadWriteOnce
# #   storageClassName: ebs-auto-optimized
# #   resources:
# #     requests:
# #       storage: 25Gi

# # -------------------------------
# # Headless Service (required for StatefulSets)
# # Provides stable DNS for OpenObserve pods
# # -------------------------------
# apiVersion: v1
# kind: Service
# metadata:
#   name: openobserve
#   namespace: terotam
# spec:
#   type: ClusterIP
#   ports:
#     - port: 80         # Service port exposed to ALB
#       targetPort: 5080 # Pod containerPort
#       name: http
#   selector:
#     app: openobserve

# ---
# # -------------------------------
# # StatefulSet for OpenObserve
# # Manages pods with persistent storage
# # -------------------------------
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: openobserve
#   namespace: terotam
#   labels:
#     app: openobserve
# spec:
#   serviceName: openobserve   # must match headless service
#   replicas: 1                # can scale up later
#   podManagementPolicy: Parallel  # starts pods in parallel instead of sequential
#   updateStrategy:
#     type: RollingUpdate 
#   selector:
#     matchLabels:
#       app: openobserve
#   template:
#     metadata:
#       labels:
#         app: openobserve
#     spec:
#       # Security context ensures pods do not run as root
#       securityContext:
#         fsGroup: 2000
#         runAsUser: 10000
#         runAsGroup: 3000
#         runAsNonRoot: true
#       containers:
#         - name: openobserve
#           image: o2cr.ai/openobserve/openobserve:latest
#           imagePullPolicy: Always
#           env:
#             - name: ZO_ROOT_USER_EMAIL
#               value: "mayur.patel@aavgo.com"
#             - name: ZO_ROOT_USER_PASSWORD
#               value: "Complexpass#123"
#             - name: ZO_DATA_DIR
#               value: "/data"
#           resources:
#             # Requests: what the pod is guaranteed
#             # Limits: maximum resources allowed
#             requests:
#               cpu: 500m
#               memory: 1Gi
#             limits:
#               cpu: 2
#               memory: 2Gi
#           ports:
#             - containerPort: 5080
#               name: http
#           volumeMounts:
#             - name: data
#               mountPath: /data
#   # -------------------------------
#   # VolumeClaimTemplates
#   # Ensures each pod in StatefulSet gets its own PVC automatically
#   # -------------------------------
#   volumeClaimTemplates:
#   - metadata:
#       name: data
#     spec:
#       accessModes: ["ReadWriteOnce"]
#       storageClassName: openobserve
#       resources:
#         requests:
#           storage: 25Gi


version: "3.9"

services:
  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:latest
    container_name: openobserve
    restart: unless-stopped
    ports:
      - "5080:5080"   # Web UI / API
      - "5081:5081"   # Optional gRPC
    environment:
      - ZO_ROOT_USER_EMAIL=admin@example.com   # change this
      - ZO_ROOT_USER_PASSWORD=SuperSecret123   # change this
      - ZO_DATA_DIR=/data
      - ZO_TELEMETRY=false
    volumes:
      - ./data:/data:rw


      
server {
    server_name monitoring.test.com;
    underscores_in_headers on;

    location / {
        proxy_pass http://127.0.0.1:5080;
        proxy_http_version  1.1;
        proxy_cache_bypass  $http_upgrade;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        "upgrade";
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-Port  $server_port;

        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-XSS-Protection "1; mode=block";
        add_header Content-Security-Policy "upgrade-insecure-requests";
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
    }

    listen 443 ssl http2;
    ssl_certificate     /home/ubuntu/ssl/terotam-2024.crt;
    ssl_certificate_key /home/ubuntu/ssl/terotam-2024.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
}



[OUTPUT]
  Name            http
  Match           *
  URI             /api/default/default/_json
  Host            monitoring.aavgo.com
  Port            443
  tls             On
  Format          json
  Json_date_key   _timestamp
  Json_date_format iso8601
  HTTP_User       admin@example.com
  HTTP_Passwd     2jCeEMWOurPgp8BD
  compress        gzip


############################### telegraf send to open observed ####################3


apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: telegraf
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: telegraf
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "nodes/proxy", "endpoints"]
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: telegraf
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: telegraf
subjects:
  - kind: ServiceAccount
    name: telegraf
    namespace: monitoring
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: telegraf
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: telegraf
  template:
    metadata:
      labels:
        app: telegraf
    spec:
      serviceAccountName: telegraf
      containers:
        - name: telegraf
          image: telegraf:1.30-alpine
          resources:
            limits:
              memory: 200Mi
              cpu: 200m
            requests:
              memory: 100Mi
              cpu: 100m
          env:
            - name: HOST_PROC
              value: /host/proc
            - name: HOST_SYS
              value: /host/sys
            - name: HOST_ETC
              value: /host/etc
          volumeMounts:
            - name: config
              mountPath: /etc/telegraf/telegraf.conf
              subPath: telegraf.conf
            - name: proc
              mountPath: /host/proc
              readOnly: true
            - name: sys
              mountPath: /host/sys
              readOnly: true
            - name: etc
              mountPath: /host/etc
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: telegraf-config
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: etc
          hostPath:
            path: /etc
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-config
  namespace: monitoring
data:
  telegraf.conf: |+
    [agent]
      interval = "30s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "5s"
      flush_interval = "30s"
      flush_jitter = "5s"
      omit_hostname = false

    ####################################################################
    # ðŸ“Š NODE / SYSTEM METRICS
    ####################################################################
    [[inputs.cpu]]
      percpu = true
      totalcpu = true
      report_active = true

    [[inputs.mem]]

    [[inputs.disk]]
      ignore_fs = ["tmpfs", "devtmpfs", "overlay"]

    [[inputs.net]]

    [[inputs.system]]

    [[inputs.processes]]

    ####################################################################
    # ðŸ“Š KUBERNETES / CONTAINER METRICS
    ####################################################################
    [[inputs.kubernetes]]
      url = "https://$HOSTNAME:10250"
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      fielddrop = ["uptime_ns"]

    ####################################################################
    # ðŸ“¤ OUTPUT TO OPENOBSERVE (JSON)
    ####################################################################
    [[outputs.http]]
      url = "https://monitoring.aavgo.com/api/default/default/_json"
      method = "POST"
      data_format = "json"
      username = "admin@example.com"
      password = "2jCeEMWOurPgp8BD"
      insecure_skip_verify = true
      timeout = "10s"
      content_encoding = "gzip"
